node.js

Node.js 是一个基于 Chrome V8 引擎的 JavaScript 运行环境，nodejs允许javascript代码运行在服务端

javascript并不只是能运行在浏览器端，浏览器端能够运行js是因为浏览器有js解析器，因此只需要有js解析器，任何软件都可以运行js。

nodejs可以在服务端运行js，因为nodejs是基于chrome v8的js引擎。

nodejs的本质：不是一门新的编程语言，nodejs是javascript运行在服务端的运行环境，编程语言还是javascript

1. nodejs与浏览器的区别
  相同点：nodejs与浏览器都是浏览器的运行环境，都能够解析js程序。对于ECMAScript语法来说，在nodejs和浏览器中都能运行。
  不同点：nodejs无法使用DOM和BOM的操作，浏览器无法执行nodejs中的文件操作等功能

2. nodejs可以干什么？
  开发服务端程
  开发命令行工具（CLI），比如npm,webpack,gulp,less,sass等
  开发桌面应用程序（借助 node-webkit、electron 等框架实现）

3.NodeJs 超强的高并发能力。
  服务器端语言中存在着什么问题。 在 Java、PHP 或者.net 等服务器端语言
中，会为每一个客户端连接创建一个新的线程。而每个线程需要耗费大约 2MB 内存。也就是说，理论上，
一个 8GB 内存的服务器可以同时连接的最大用户数为 4000 个左右。要让 Web 应用程序支持更多的用户，就
需要增加服务器的数量，而 Web 应用程序的硬件成本当然就上升了。
Node.js 不为每个客户连接创建一个新的线程，而仅仅使用一个线程。当有用户连接了，就触发一个
内部事件，通过非阻塞 I/O、事件驱动机制，让 Node.js 程序宏观上也是并行的。使用 Node.js，一个 8GB
内存的服务器，可以同时处理超过 4 万用户的连接。

4.实现高性能服务器
  严格地说，Node.js 是一个用于开发各种 Web 服务器的开发工具。在 Node.js 服务器中，运行的是高性能 V8
JavaScript 脚本语言，该语言是一种可以运行在服务器端的 JavaScript 脚本语言。
那么，什么是 V8 JavaScript 脚本语言呢？该语言是一种被 V8 JavaScript 引擎所解析并执行的脚本语言。V8
JavaScript 引擎是由 Google 公司使用 C++语言开发的一种高性能 JavaScript 引擎，该引擎并不局限于在浏览
器中运行。Node.js 将其转用在了服务器中，并且为其提供了许多附加的具有各种不同用途的 API。例如，
在一个服务器中，经常需要处理各种二进制数据。在 JavaScript 脚本语言中，只具有非常有限的对二进制数
据的处理能力，而 Node.js 所提供的 Buffer 类则提供了丰富的对二进制数据的处理能力。
另外，在 V8 JavaScript 引擎内部使用一种全新的编译技术。这意味着开发者编写的高端的 JavaScript 脚本代
码与开发者编写的低端的 C语言具有非常相近的执行效率，这也是 Node.js 服务器可以提供的一个重要特性。

node 小插件可以保存代码时自动重启服务 supervisor
  1.npm install -g supervisor 
  2.使用supervisor 文件名 运行文件

node 的主要核心模块 http fs url 
  1.http模块
    var http = require('http')
    // 创建一个服务
    http.createServer(function (request, response) {
      // request 获取url信息
      // response 浏览器返回响应信息

      // 设置http头部,状态码是200 文件类型是html 字符集是utf8
      response.writeHead(200, { "Content-Type": "text/html;charset=UTF-8" })
      // 发送响应数据,
      response.write("哈哈哈")
      // End 方法使 Web 服务器停止处理脚本并返回当前结果 ,如果没有结束会一直转圈
      response.end()
    }).listen(8888)
    // 终端打印信息
    console.log('Server running at http://127.0.0.1:8888/')
  2.url模块 部分方法
    1.url.parse() // 将url解析成对象
      第二个参数可以将query格式化成对象的形式
      url.parse("http://www.baidu.com/new?name=zs&age=18", true)
    2.url.format() 与url.parse相反可以将对象转换成url,参数是一个对象
    3.url.resolve() 替换 域名后面第一个“/”后的内容；
      console.log(url.resolve('http://www.baidu.com/new?name=zs&age=18', '/test'))

    通过url模块获取get传值的参数
      var url = require("url")
      var http = require('http')
      var app = http.createServer(function (req, res) {
        res.writeHead(200, { "Content-Type": "text/html;charset=UTF-8" })
        if (req.url != '/favicon.ico') {
          // 浏览器中输入http://localhost:8001/news?name=zs&age=18,想拿到参数 
          var query = url.parse(req.url, true)
          console.log(query.query)
        }
        res.write("url模块")
        res.end()
      })
      app.listen(8001,'127.0.0.1')
      console.log('Server running at http://127.0.0.1:8001/')
  3.fs模块
    1.fs.stat 检测是文件还是目录,第一个参数是文件或者目录地址,第二个参数是回调函数
        const fs = require('fs')
        fs.stat('http.js', (err, stat) => {
          if (err) { console.log(err) }
          console.log(stat)
          console.log('文件', stat.isFile())  // 文件就返回true
          console.log('目录', stat.isDirectory())  // 目录就返回true
        })
    2.fs.mkdir 创建目录 第一个参数是创建文件或者目录地址,第二个是回调,如果文件或目录已存在则会报错
        fs.mkdir('logs', (error) => {
          if (error) { console.log(error) }
          console.log('成功创建目录：logs')
        })
    
    3.fs.writeFile 创建写入文件 
        第一个参数是路径
        第二个参数是写入的内容,string或者buffer格式
        第三个参数可以忽略,设置文件类型(string,buffer等),编码格式(utf8),文件读写权限等
        第四个参数是回调函数
        路径中找不到文件会自动创建并写入,但是路径中的文件夹找不到则会报错
        fs.writeFile('logs/hello.log', '您好 ~ \n', (error) => {
          if(error) {
          console.log(error)
          } else {
          console.log('成功写入文件')
          }
        })
    4. fs.appendFile 追加文件
        fs.appendFile('logs/hello.log', 'hello ~ \n', (error) => {
          if(error) {
            console.log(error)
          } else {
           console.log('成功写入文件')
          }
        })
    5.fs.readFile 读取文件
        fs.readFile('hello.log', 'utf8', (error, data) => {
          if (error) {
            console.log(error)
          } else {
            console.log(data)
          }
        })

    6.fs.readdir 读取目录
        const fs = require('fs')
        fs.readdir('node_modules', (error, files) => {
          if (error) {
            console.log(error)
          } else {
            console.log(files) // ['bar.js','foo']
          }
        })

     7.fs.rename 重命名
        fs.rename('hello.log', 'greeting.log', (error) => {
          if (error) {
            console.log(error)
          } else {
            console.log('重命名成功')
          }
        })

    8. fs.rmdir 删除目录
        fs.rmdir('js', (error) => {
          if (error) {
            console.log(error)
          } else {
            console.log('成功的删除了目录：js')
          }
        })
    9. fs.unlink 删除文件
        fs.unlink(`greeting.log`, (error) => {
          if (error) {
            console.log(error)
          } else {
            console.log(`成功的删除了文件: greeting.log`)
          }
        })
    10.fs.createReadStream 从文件流中读取数据
        var readStream = fs.createReadStream('node.txt')
        var str = ''// 保存的数据
        var count = 0
        readStream.on('data', function (chunk) {
          str += chunk
          count++
        })
        readStream.on('end', function () {
          console.log(str)
          console.log(count)
        })
        readStream.on('error', (error) => {
          console.log(error)
        })
    11. fs.createWriteStream 写入文件 文件读写都是异步操作
        var data = 'wosjasdasdasda'
        var writeStream = fs.createWriteStream('node1.js')
        writeStream.write(data, 'utf8')
        // 标记写入完成
        writeStream.end()
        writeStream.on('finish', function () {
          console.log('写入完成')
        })
        writeStream.on('error', function (err) {
          console.log(err.stack);
        });
        console.log("程序执行完毕");

    12.读取写入管道流
        我们把文件比作装水的桶，而水就是文件里的内容，我们用一根管子(pipe)连接两个桶使得水从一个桶流入另一个桶，这样就慢慢的实现了大文件的复制过程。
        // 创建一个可读流
        var readerStream = fs.createReadStream('node.txt');
        // 创建一个可写流
        var writerStream = fs.createWriteStream('output.txt');
        // 管道读写操作，读取node.txt内容写入到output.txt中
        readerStream.pipe(writerStream)
        console.log("程序执行完毕");


  Node 应用由模块组成，采用 CommonJS 模块规范。
    在 Node 中，模块分为两类:
    一类是 Node 提供的模块,称为核心模块；另一类是用户编写的模块，称为文件模块。
    • 核心模块部分在 Node 源代码的编译过程中，编译进了二进制执行文件。在 Node 进
    程启动时，部分核心模块就被直接加载进内存中，所以这部分核心模块引入时，文件定位和
    编译执行这两个步骤可以省略掉，并且在路径分析中优先判断，所以它的加载速度是最快的。
    如：HTTP 模块 、URL 模块、Fs 模块都是 nodejs 内置的核心模块，可以直接引入使用。
    • 文件模块则是在运行时动态加载，需要完整的路径分析、文件定位、编译执行过程、
    速度相比核心模块稍微慢一些，但是用的非常多。这些模块需要我们自己定义。接下来我
    们看一下 nodejs 中的自定义模块。

    CommonJS（Nodejs）中自定义模块的规定：
    1.我们可以把公共的功能抽离成为一个单独的 js 文件作为一个模块，默认情况下面这
    个模块里面的方法或者属性，外面是没法访问的。如果要让外部可以访问模块里面的方法或
    者属性，就必须在模块里面通过 exports 或者 module.exports 暴露属性或者方法。
    2. 在需要使用这些模块的文件中，通过 require 的方式引入这个模块。这个时候就可以
    使用模块里面暴露的属性和方法

    // 1.定义一个 tools.js 的模块
    //模块定义
    var tools = {
    sayHello: function() {
    return 'hello NodeJS';
    },
    add: function(x, y) {
    return x + y;
    }
    };
    // 模块接口的暴露
    // module.exports = tools;
    exports.sayHello = tools.sayHello;
    exports.add = tools.add;
    var http = require('http');

    // 2.引入自定义的 tools.js 模块
    var tools= require('./tools');
    tools.sayHello(); //使用模块 

    var str = require('bar') // 自动在node_modules下寻找bar模块
    node 中 模块引入(非相对路径 ./的形式)会首先在根目录下寻找,如果没有就自动在根目录下的node_modules内寻找模块
    自定义模块较复杂是个文件夹时,引入模块就需要加上路径var foo = require('foo/foo.js')
    也可以通过 npm init --yes 在模块内生成package.json文件来指定模块的入口文件(main字段)
    引入模块时只要通过 require('foo') 方式就可以引入自定义的模块了

  NPM 命令详解。
    1. npm -v 查看 npm 版本
    2. 使用 npm 命令安装模块
    npm install Module Name
    如安装 jq 模块：
    npm install jquery
    3. npm uninstall moudleName 卸载模块
    npm uninstall ModuleName
    4. npm list 查看当前目录下已安装的 node 包
    npm list
    5. npm info jquery 查看 jquery 的版本
    npm info 模块 //查看模块的版本
    6. 指定版本安装 npm install jquery@1.8.0 

  package.json
    package.json 定义了这个项目所需要的各种模块,以及项目的配置信息(比如名称、
    版本、许可证等元数据)
    1、创建 package.json
      npm init
      npm init –yes
    2、package.json 文件
      {
        "name": "test",
        "version": "1.0.0",
        "description": "test",
        "main": "main.js",
        "keywords": [
          "test"
          ],
        "author": "wade",
        "license": "MIT",
        "dependencies": {
          "express": "^4.10.1"
        },
        "devDependencies": {
          "jslint": "^0.6.5"
        }
      }
    3、安装模块并把模块写入 package.json(依赖)
    npm install babel-cli --save-dev
    npm install 模块 --save
    npm install 模块 --save-dev
    4、dependencies 与 devDependencies 之间的区别?
    使用 npm install node_module –save 自动更新 dependencies 字段值;
    使用 npm install node_module –save-dev 自动更新 devDependencies 字段值;

    dependencie 配置当前程序所依赖的其他包。
    devDependencie 配置当前程序所依赖的其他包，只会下载模块，而不下载这些模块的
    测试和文档框架

    "dependencies": {
    "ejs": "^2.3.4",
    "express": "^4.13.3",
    "formidable": "^1.0.17"
    }
    ^表示第一位版本号不变，后面两位取最新的
    ~表示前两位不变，最后一个取最新
    *表示全部取最新
    
    淘宝 NPM 镜像是一个完整 npmjs.org 镜像，你可以用此代替官方版本(只读)，同步频
    率目前为 10 分钟 一次以保证尽量与官方服务同步。
    npm install -g cnpm --registry=https://registry.npm.taobao.org








    