创建package.json npm init 
安装express   npm install express --save
引入express
  var express = require('express')
  var app = news express() // new关键字不写也可以
配置路由
  app.get('',function(req,res){

  })
  app.listen(3000,'127.0.0.1')

动态路由配置与获取
  // 1.设置动态路由
  app.get('/login/:aid', function (req, res) {
    // 2.获取动态路由
    console.log(req.params.aid)
    res.send('nihao')
  })

get传值设置与获取
  // url :localhost:3000/login?age=18&name=zs
  app.get('/product/', function (req, res) {
    console.log(req.query.name)
    res.send('nihao')
  })
express中使用模板引擎(ejs)
  1.安装ejs npm install ejs 
  2.配置模板引擎(直接使用ejs,不用引入 express集成了ejs) app.set("view engine","ejs")
  3.在express中使用模板引擎
    res.render(路径[,参数],[回调函数])
    默认会寻找根目录下views文件夹里的文件,文件后缀为.ejs可以不写 
    app.get('',function(req.res){
      var arr = [111, 222, 333]
      res.render('index', { list: arr })
    })

    // views/index.ejs
    <body>
      <div>你好ejs</div>
      <ul>
        <% for(var i=0; i<list.length; i++) {%>
          <li>
            <%= list[i] %>
          </li>
          <% } %>
      </ul>
    </body>

ejs改变模板的位置 app.set('views',__dirname + '/views)

Ejs 后缀修改为 Html

看着.ejs 的后缀总觉得不爽，使用如下方法，可以将模板文件的后缀换成我们习惯的.html。
  1.在 app.js 的头上定义 ejs:,代码如下:
  var ejs = require('ejs');
  2.注册 html 模板引擎代码如下：
  app.engine('html',ejs.__express);
  3.将模板引擎换成 html 代码如下:
  app.set('view engine', 'html');
  4.修改模板文件的后缀为.html。

ejs模板中支持引入其他模板文件 类似引入公共组件

views/index.ejs
  <body>
    <div>你好ejs</div>
    <%- include public/header.ejs %>
      <ul>
        <% for(var i=0; i<list.length; i++) {%>
          <li>
            <%= list[i] %>
          </li>
          <% } %>
      </ul>
  </body>
views/public/headder/.ejs
  <h2>我是header组件</h2>

利用express.static 托管静态文件 css,图片,js,zip等等
  app.use(express.static('public'))  // 给该目录下的文件提供静态web服务  
  http://localhost:3000/css/style.css 会先访问public下css/style.css ,没有再匹配路由
  http://localhost:3000/111.rar 会先访问public下111.rar,进行下载

views/index.ejs 
  <link rel="stylesheet" href="css/style.css">  访问的是localhost:3000/css/style.css 
  <img src="images/baidu.png"> // 路径不用写public,但是访问的就是public下的images/baidu.png

配置虚拟目录的静态服务 
  app.use('/static', express.static('public'));
  当路由中有/static时,就会在public目录下寻找static后面路径的文件
    eg: localhost:3000/static/images/baidu.png  // 访问public下的images/baidu.png

Express 是一个自身功能极简，完全是由路由和中间件构成一个的 web 开发框架：从
  本质上来说，一个 Express 应用就是在调用各种中间件。

中间件（Middleware） 是一个函数，它可以访问请求对象（request object (req)）, 响
  应对象（response object (res)）, 和 web 应用中处理请求-响应循环流程中的中间件，一般
  被命名为 next 的变量。

中间件的功能包括：
  执行任何代码。
  修改请求和响应对象。
  终结请求-响应循环。
  调用堆栈中的下一个中间件。

如果我的 get、post 回调函数中，没有 next 参数，那么就匹配上第一个路由，就不会往下匹
  配了。如果想往下匹配的话，那么需要写 next()


中间件就是匹配路由之前和匹配路由之后做的一系列操作
express可以使用下面几种中间件:
  1.应用级中间件
    eg: 在路由匹配之前进行操作
    next() 路由继续向下匹配
    app.use(function(req,res,next){ // 匹配任何路由
      console.log(new Date())
      next()
    })
  2.路由级中间件
    app.get("/",function(req,res,next){
      console.log("1");
      next();
    });
    app.get("/",function(req,res){
      console.log("2");
    });
  3.错误处理级中间件
    /*中间件相应 404*/
    app.use(function(req,res){   // 放在路由最下面,处理未匹配的路由错误
    //res.render('404',{});
    res.status(404).render('404',{});
    })
  4.内置中间件
    //静态服务 index.html
    app.use('/static',express.static("./static")); /*匹配所有的路径*/
    app.use('/news',express.static("./static")); /*匹配所有的路径*/
  5.第三方中间件
    body-parser 中间件 第三方的 获取 post 提交的数据
    1.cnpm install body-parser --save
    2.var bodyParser = require('body-parser')
    3.设置中间件
    //处理 form 表单的中间件
    // parse application/x-www-form-urlencoded
    app.use(bodyParser.urlencoded({ extended: false })); form 表单提交的数据
    // parse application/json
    app.use(bodyParser.json()); 提交的 json 数据的数据
    4.req.body 获取数据

获取 Get Post 请求的参数
  ● GET 请求的参数在 URL 中，在原生 Node 中，需要使用 url 模块来识别参数字符串。在
  Express 中，不需要使用 url 模块了。可以直接使用 req.query 对象。

  ● POST 请求在 express 中不能直接获得，可以使用 body-parser 模块。使用后，将可以用
  req.body 得到参数。但是如果表单中含有文件上传，那么还是需要使用 formidable 模块。
    1.安装
    npm install body-parser
    2.使用 req.body 获取 post 过来的参数
    var express = require('express')
    var bodyParser = require('body-parser')
    var app = express()
    // parse application/x-www-form-urlencoded
    app.use(bodyParser.urlencoded({ extended: false }))
    // parse application/json
    app.use(bodyParser.json())
    app.use(function (req, res) {
    res.setHeader('Content-Type', 'text/plain')
    res.write('you posted:\n')
    res.end(JSON.stringify(req.body, null, 2))
    })

COOKIE简介
  ● cookie 是存储于访问者的计算机中的变量。可以让我们用同一个浏览器访问同一个域
  名的时候共享数据。
  ● HTTP 是无状态协议。简单地说，当你浏览了一个页面，然后转到同一个网站的另一个页
  面，服务器无法认识到这是同一个浏览器在访问同一个网站。每一次的访问，都是没有任何
  关系的。
  ● Cookie 是一个简单到爆的想法：当访问一个页面的时候，服务器在下行 HTTP 报文中，
  命令浏览器存储一个字符串; 浏览器再访问同一个域的时候，将把这个字符串携带到上行
  HTTP 请求中。第一次访问一个服务器，不可能携带 cookie。 必须是服务器得到这次请求，
  在下行响应报头中，携带 cookie 信息，此后每一次浏览器往这个服务器发出的请求，都会
  携带这个 cookie。

Cookie 特点
  ● cookie 保存在浏览器本地
  ● 正常设置的 cookie 是不加密的，用户可以自由看到;
  ● 用户可以删除 cookie，或者禁用它
  ● cookie 可以被篡改
  ● cookie 可以用于攻击
  ● cookie 存储量很小。未来实际上要被 localStorage 替代，但是后者 IE9 兼容。
  
cookie的安装与使用   cookie是保存在浏览器本地的,如果没有超过已经设置的过期时间,关闭浏览器再打开也是存在的
  npm i cookie-parser --save 
  var cookieParser = require('cookie-parser')
  app.use(cookieParser())
  // 设置cookie 1:cookie名称;2:cookie的值;3:cookie配置信息
  res.cookie('username','cookie的值',{maxAge:6000}),
  res.cookie('rememberme', '1', { maxAge: 900000, httpOnly: true })
  res.cookie('name', 'tobi', { domain: '.example.com', path: '/admin', secure: true });
  res.cookie('rememberme', '1', { expires: new Date(Date.now() + 900000), httpOnly:true });
  // 获取cookie 
  console.log(req.cookies)
  // 删除 cookie
  res.cookie('rememberme', '', { expires: new Date(0)});
  res.cookie('username','zhangsan',{domain:'.ccc.com',maxAge:0,httpOnly:true});

cookie的可配置属性
  domain: 域名(baidu.com)  设置该属性后会让该域名下的二级域名(www.baidu.com begw.baidu.com be.baidu.com)也可以共享cookie
      修改本地host  让多个二级域名对应127.0.0.1 就可以测试了www.baidu.com:3000/setcookie  be.baidu.com:3000/setcookie
  name=value：键值对，可以设置要保存的 Key/Value，注意这里的 name 不能和其他属性项的名字
  一样
  Expires： 过期时间（秒），在设置的某个时间点后该 Cookie 就会失效，如 expires=Wednesday,
  09-Nov-99 23:12:40 GMT
  maxAge： 最大失效时间（毫秒），设置在多少后失效
  secure： 当 secure 值为 true 时，cookie 在 HTTP 中是无效，在 HTTPS 中才有效
  Path： 表示 cookie 影响到的路，如 path=/。如果路径不能匹配时，浏览器则不发送这个 Cookie 服务端就不能获取到
  httpOnly：是微软对 COOKIE 做的扩展。如果在 COOKIE 中设置了“httpOnly”属性，则通过程序（JS
  脚本、applet 等）将无法读取到 COOKIE 信息，防止 XSS 攻击产生
  signed：表示是否签名 cookie, 设为 true 会对这个 cookie 签名，这样就需要用
  res.signedCookies 而不是 res.cookies 访问它。被篡改的签名 cookie 会被服务器拒绝，并且 cookie
  值会重置为它的原始值

如何让用户浏览器看不到cookie的明文
  1.保存的时候加密
  2.cookie-parser利用cookie配置项的参数 signed:true
    1.配置中间件的时候需要传参
    var cookieParser = require('cookie-parser');
    app.use(cookieParser('123456'));
    2.设置 cookie 的时候配置 signed 属性
    res.cookie('userinfo','hahaha',{domain:'.ccc.com',maxAge:900000,httpOnly:true,signed:true});
    3. signedCookies 调用设置的 cookie
    console.log(req.signedCookies); 