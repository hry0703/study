/***  
 * @description 执行环境与作用域
 *     执行环境定义了变量或函数有权访问的其他数据，决定了它们各自的行为。每个执行环境都有一个 与之关联的变量对象（variable object），
 *     环境中定义的所有变量和函数都保存在这个对象中
 */

 // 全局执行环境是最外围的一个执行环境，根据 ECMAScript实现所在的宿主环境不同，表示执行环 境的对象也不一样。
 // 在 Web 浏览器中，全局执行环境被认为是 window 对象 因此所有全局变量和函数都是作为 window 对象的属性和方法创建的

 
//  每个函数都有自己的执行环境。当执行流进入一个函数时，函数的环境就会被推入一个环境栈中。 而在函数执行之后，栈将其环境弹出，
//  把控制权返回给之前的执行环境。ECMAScript 程序中的执行流 正是由这个方便的机制控制着

//  当代码在一个环境中执行时，会创建变量对象的一个作用域链（scope chain）。
//  作用域链的用途是 保证对执行环境有权访问的所有变量和函数的有序访问。

var arr = {
    name:'zs',
    age:18,
}
console.log(arr.toLocaleString())
console.log(arr.toString())
console.log(arr.valueOf())
